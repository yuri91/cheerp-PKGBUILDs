# Maintainer: Yuri Iozzelli <y.iozzelli@gmail.com>
pkgname=cheerp
pkgver=29.44f25e257374
pkgrel=1
epoch=
pkgdesc="A C++ compiler for the Web"
arch=("x86_64")
url="leaningtech.com/cheerp"
license=('custom')
groups=()
depends=("python" "gcc-libs")
makedepends=("cmake" "ninja")
checkdepends=()
optdepends=()
provides=()
conflicts=()
replaces=()
backup=()
options=("!strip")
install=
changelog=
source=("git+https://github.com/leaningtech/cheerp-compiler.git"
	"git+https://github.com/leaningtech/cheerp-utils.git"
	"git+https://github.com/leaningtech/cheerp-musl.git"
	"git+https://github.com/leaningtech/cheerp-libs.git"
)
md5sums=('SKIP'
	 'SKIP'
	 'SKIP'
	 'SKIP'
	)

pkgver() {
  cd "$_pkgname"
  echo $(git rev-list --count HEAD).$(git rev-parse --short HEAD)
}

: ${COMPILER_ONLY:=0}
: ${NO_CONFIGURE:=0}
: ${CLEAN_LIBS:=0}

build() {
	pushd $srcdir/cheerp-compiler

	rm -rf $(find build/include/ -maxdepth 1 -mindepth 1 -not -name llvm)

	if [ $NO_CONFIGURE == "0" ]
	then
		cmake -S llvm -B build -C llvm/CheerpCmakeConf.cmake \
			-DLLVM_ENABLE_PROJECTS=clang \
			-GNinja \
			-DCMAKE_BUILD_TYPE=Release \
			-DCMAKE_C_FLAGS_RELEASE="-O2 -fcolor-diagnostics" \
			-DCMAKE_CXX_FLAGS_RELEASE="-O2 -fcolor-diagnostics" \
			-DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=lld \
			-DCMAKE_SHARED_LINKER_FLAGS=-fuse-ld=mold \
			-DCMAKE_MODULE_LINKER_FLAGS=-fuse-ld=mold \
			-DCMAKE_C_COMPILER=clang \
			-DCMAKE_CXX_COMPILER=clang++
	fi
	ninja -C build
	popd

	if [ $COMPILER_ONLY == "1" ]
	then
		return
	fi

	pushd $srcdir/cheerp-utils
	cmake -GNinja -B build -DCHEERP_PREFIX=/opt/cheerp -DCMAKE_INSTALL_PREFIX=$pkgdir/opt/cheerp
	ninja -C build
	popd

	export CPPFLAGS=""
	export CFLAGS=""
	export CXXFLAGS=""
	export LDFLAGS=""
	export MAKEFLAGS=""
	pushd $srcdir/cheerp-musl
	
	mkdir -p build_genericjs
	pushd build_genericjs
	if [ $NO_CONFIGURE == "0" ]
	then
		RANLIB="$srcdir/cheerp-compiler/build/bin/llvm-ar s" AR="$srcdir/cheerp-compiler/build/bin/llvm-ar"  CC="$srcdir/cheerp-compiler/build/bin/clang -target cheerp --sysroot=$srcdir/cheerp-compiler/build" LD="$srcdir/cheerp-compiler/build/bin/llvm-link" CFLAGS="-Wno-int-conversion" ../configure --target=cheerp --disable-shared --prefix=/ --with-malloc=dlmalloc
	fi
	if [ $CLEAN_LIBS == "1" ]
	then
		make clean
	fi
	make
	make DESTDIR="$srcdir/cheerp-compiler/build" install-headers
	mkdir -p $srcdir/cheerp-compiler/build/lib/genericjs
	cp -v lib/libc.bc "$srcdir/cheerp-compiler/build/lib/genericjs/libc.bc"
	cp -v lib/crt1.bc $srcdir/cheerp-compiler/build/lib/genericjs/crt1.bc
	popd

	mkdir -p build_asmjs
	pushd build_asmjs
	if [ $NO_CONFIGURE == "0" ]
	then
		RANLIB="$srcdir/cheerp-compiler/build/bin/llvm-ar s" AR="$srcdir/cheerp-compiler/build/bin/llvm-ar"  CC="$srcdir/cheerp-compiler/build/bin/clang -target cheerp-wasm  --sysroot=$srcdir/cheerp-compiler/build" LD="$srcdir/cheerp-compiler/build/bin/llvm-link" CFLAGS="-Wno-int-conversion" ../configure --target=cheerp-wasm --disable-shared --prefix=/ --with-malloc=dlmalloc
	fi
	if [ $CLEAN_LIBS == "1" ]
	then
		make clean
	fi
	make
	mkdir -p $srcdir/cheerp-compiler/build/lib/asmjs
	cp -v lib/libc.bc "$srcdir/cheerp-compiler/build/lib/asmjs/libc.bc"
	cp -v lib/crt1.bc $srcdir/cheerp-compiler/build/lib/asmjs/crt1.bc
	popd

	popd

	pushd $srcdir/cheerp-compiler

	mkdir -p build_cmake/Platform
	ln -sf $srcdir/cheerp-utils/build/CheerpToolchain.cmake build_cmake/
	ln -sf $srcdir/cheerp-utils/build/CheerpWasmToolchain.cmake build_cmake/
	ln -sf $srcdir/cheerp-utils/build/CheerpCommon.cmake build_cmake/
	ln -sf "$srcdir/cheerp-utils/tools/Cheerp.cmake" build_cmake/Platform
	ln -sf "$srcdir/cheerp-utils/include/client" $srcdir/cheerp-compiler/build/include/cheerp

	if [ $NO_CONFIGURE == "0" ]
	then
		cmake -S runtimes -B build_runtimes_js \
			-GNinja \
			-DCMAKE_BUILD_TYPE=Release \
			-DCMAKE_CXX_COMPILER_TARGET="cheerp" \
			-DCMAKE_TOOLCHAIN_FILE="$srcdir/cheerp-compiler/build_cmake/CheerpToolchain.cmake" \
			-DCHEERP_PREFIX="$srcdir/cheerp-compiler/build/" \
			-DCMAKE_MODULE_PATH="$srcdir/cheerp-compiler/build_cmake" \
			-DCMAKE_CXX_FLAGS="--sysroot=$srcdir/cheerp-compiler/build -fcolor-diagnostics" \
			-C runtimes/CheerpCmakeConf.cmake
	fi
	if [ $CLEAN_LIBS == "1" ]
	then
		ninja -C build_runtimes_js clean
	fi
	ninja -C build_runtimes_js
	cp -v build_runtimes_js/lib/libc++.bc "$srcdir/cheerp-compiler/build/lib/genericjs/"
	cp -v build_runtimes_js/lib/libc++abi.bc "$srcdir/cheerp-compiler/build/lib/genericjs/"

	if [ $NO_CONFIGURE == "0" ]
	then
		cmake -S runtimes -B build_runtimes_wasm \
			-GNinja \
			-DCMAKE_BUILD_TYPE=Release \
			-DCMAKE_CXX_COMPILER_TARGET="cheerp-wasm" \
			-DCMAKE_TOOLCHAIN_FILE="$srcdir/cheerp-compiler/build_cmake/CheerpWasmToolchain.cmake" \
			-DCHEERP_PREFIX="$srcdir/cheerp-compiler/build/" \
			-DCMAKE_MODULE_PATH="$srcdir/cheerp-compiler/build_cmake" \
			-DCMAKE_CXX_FLAGS="--sysroot=$srcdir/cheerp-compiler/build -fcolor-diagnostics" \
			-C runtimes/CheerpCmakeConf.cmake
	fi
	if [ $CLEAN_LIBS == "1" ]
	then
		ninja -C build_runtimes_wasm clean
	fi
	ninja -C build_runtimes_wasm
	cp -v build_runtimes_wasm/lib/libc++.bc "$srcdir/cheerp-compiler/build/lib/asmjs/"
	cp -v build_runtimes_wasm/lib/libc++abi.bc "$srcdir/cheerp-compiler/build/lib/asmjs/"
	popd

	ln -sf "$srcdir/cheerp-compiler/build_runtimes_js/include/c++" "$srcdir/cheerp-compiler/build/include/c++"

	pushd $srcdir/cheerp-libs
	make -C wasm CHEERP_PREFIX="$srcdir/cheerp-compiler/build"
	make -C webgles CHEERP_PREFIX="$srcdir/cheerp-compiler/build" CXXFLAGS="-target cheerp --sysroot=$srcdir/cheerp-compiler/build"
	make -C stdlibs genericjs CHEERP_PREFIX="$srcdir/cheerp-compiler/build"
	make -C stdlibs asmjs CHEERP_PREFIX="$srcdir/cheerp-compiler/build"
	pushd system
	cmake -GNinja -B build_genericjs \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_CXX_COMPILER_TARGET="cheerp" \
		-DCMAKE_C_COMPILER="$srcdir/cheerp-compiler/build/bin/clang" \
		-DCMAKE_CXX_COMPILER="$srcdir/cheerp-compiler/build/bin/clang++" \
		-DCMAKE_LINKER="$srcdir/cheerp-compiler/build/bin/llvm-link" \
		-DCMAKE_SYSTEM_NAME="Cheerp" \
		-DCMAKE_MODULE_PATH="$srcdir/cheerp-compiler/build_cmake" \
		-DCMAKE_C_FLAGS="-target cheerp --sysroot=$srcdir/cheerp-compiler/build" \
		-DCMAKE_CXX_FLAGS="-target cheerp --sysroot=$srcdir/cheerp-compiler/build" \
		-DCMAKE_INSTALL_PREFIX="/opt/cheerp" \
		. 
	ninja -C build_genericjs
	cmake -GNinja -B build_asmjs \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_CXX_COMPILER_TARGET="cheerp-wasm" \
		-DCMAKE_C_COMPILER="$srcdir/cheerp-compiler/build/bin/clang" \
		-DCMAKE_CXX_COMPILER="$srcdir/cheerp-compiler/build/bin/clang++" \
		-DCMAKE_LINKER="$srcdir/cheerp-compiler/build/bin/llvm-link" \
		-DCMAKE_SYSTEM_NAME="Cheerp" \
		-DCMAKE_MODULE_PATH="$srcdir/cheerp-compiler/build_cmake" \
		-DCMAKE_C_FLAGS="-target cheerp-wasm --sysroot=$srcdir/cheerp-compiler/build" \
		-DCMAKE_CXX_FLAGS="-target cheerp-wasm --sysroot=$srcdir/cheerp-compiler/build" \
		-DCMAKE_INSTALL_PREFIX="/opt/cheerp" \
		. 
	ninja -C build_asmjs
	popd
	popd

}

package() {
	cd $srcdir/cheerp-compiler/

	DESTDIR="$pkgdir" ninja -C build install-distribution
	DESTDIR="$pkgdir" ninja -C build_runtimes_js install
	DESTDIR="$pkgdir" ninja -C build_runtimes_wasm install

	pushd $srcdir/cheerp-utils
	cmake -GNinja -B build -DCHEERP_PREFIX=/opt/cheerp -DCMAKE_INSTALL_PREFIX=$pkgdir/opt/cheerp
	ninja -C build install
	popd

	mkdir -p $pkgdir/usr/bin

	cat <<EOF > $pkgdir/usr/bin/cheerp
#!/bin/bash
/opt/cheerp/bin/clang \$@
EOF
	chmod a+x $pkgdir/usr/bin/cheerp
	cat <<EOF > $pkgdir/usr/bin/cheerp++
#!/bin/bash
/opt/cheerp/bin/clang++ \$@
EOF
	chmod a+x $pkgdir/usr/bin/cheerp++

	mkdir -p $pkgdir/usr/share/licenses/cheerp-compiler
	cp $srcdir/cheerp-compiler/llvm/LICENSE.TXT $pkgdir/usr/share/licenses/cheerp-compiler

	pushd $srcdir/cheerp-musl
	make DESTDIR="$pkgdir/opt/cheerp" -C build_genericjs install-cheerp
	make DESTDIR="$pkgdir/opt/cheerp" -C build_asmjs install-bc
	popd

	pushd $srcdir/cheerp-libs
	mkdir -p $pkgdir/opt/cheerp/lib/genericjs/
	mkdir -p $pkgdir/opt/cheerp/lib/asmjs/
	make -C wasm install INSTALL_PREFIX="$pkgdir/opt/cheerp" CHEERP_PREFIX="$pkgdir/opt/cheerp"
	make -C webgles install INSTALL_PREFIX="$pkgdir/opt/cheerp" CHEERP_PREFIX="$pkgdir/opt/cheerp"
	make -C stdlibs install_genericjs INSTALL_PREFIX="$pkgdir/opt/cheerp" CHEERP_PREFIX="$srcdir/cheerp-compiler/build"
	make -C stdlibs install_asmjs INSTALL_PREFIX="$pkgdir/opt/cheerp" CHEERP_PREFIX="$srcdir/cheerp-compiler/build"
	DESTDIR="$pkgdir" ninja -C system/build_genericjs install
	DESTDIR="$pkgdir" ninja -C system/build_asmjs install
	popd
}
